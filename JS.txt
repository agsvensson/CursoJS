= é sinal de atribuição em JS.

variável pode ser declarada como var ou let

## Data Types in JavaScript ## 

number
   Infinity
   NaN
string
boolean
null
undefined
object

## CONVERSÃO DE STRING PARA NÚMERO ## 

(number + number) para adição
(string + string) para concatenação

OBS: O comando window.prompt SEMPRE trata como uma string, mesmo que seja um número.
É uma característica do comando.

Nestes casos, é necessário fazer uma conversão de tipo.

Number.parseInt(n) SE PRECISAR EFETIVAMENTE CONVERTER PARA INTEIRO
Number.parseFloat(n) SE PRECISAR EFETIVAMENTE CONVERTER PARA REAL
Number(n) SE QUISER QUE O JAVASCRIPT DECIDA, DE ACORDO COM O VALOR QUE ELE RECEBEU, se é Inteiro ou Real.


## CONVERSÃO DE NÚMERO PARA STRING ## 
String(n)
n.toString()

CRASE é a delimitação de Template String

var s "JavaScript"
"Eu estou aprendendo s"    // não faz interpolação
"Eu estou aprendendo " + s     // usa concatenação
`Eu estou aprendendo ${s}`    //usa template string

var s "JavaScript"
s.length    // quantos caracteres a string tem
s.toUpperCase()   // tudo para "MAIÚSCULAS"
s.toLowerCase()   // tudo para "minúsculas"

var n1 = 1545.5
n1.toFixed(2)     //1545.50
n1.toFixed(2).replace('.', ',')   //1545,50
n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'})   //R$ 1,545.50
n1.toLocaleString('pt-BR', {style: 'currency', currency: 'USD'})   //US$ 1,545.50
n1.toLocaleString('pt-BR', {style: 'currency', currency: 'EUR'})   //€ 1,545.50

5 + 2 = 7
5 - 2 = 3
5 * 2 = 10
5 / 2 = 2.5
5 % 2 = 1
5 ** 2 = 25


## ORDEM DE PRECEDÊNCIA DOS OPERADORES ARITMÉTICOS ## 
()
**
* / %
+ -

var a = 5 + 3     ->  8
var b = a % 5     ->  3
var c = 5 * b ** 2     ->  45
var d = 10 - a / 2     ->  6
var e = 6 * 2 / d     ->  2
var f = b % e + 4 / e     ->  3


## AUTO-ATRIBUIÇÕES ## 
var n = 3

n = n + 4  ou n += 4     -> 7
n = n - 5  ou n -= 5     -> 2
n = n * 4  ou n *= 4     -> 8
n = n / 2  ou n /= 2     -> 4
n = n ** 2  ou n **= 2     -> 16
n = n % 5  ou n %= 5     -> 1


## INCREMENTO ## 
var x = 5

x = x + 1  ou x++     -> 6
x = x - 1  ou x--     -> 5


## RELACIONAIS ## 
5 > 2    -> true
7 < 4    -> false
8 >= 8    -> true
9 <= 7    -> false
5 == 5    -> true
4 != 4    -> false

Exemplos:
preco >= 200.50                  // o preço é maior ou igual a 200.50?
idade < 18                       // a idade é menor do que 18?
curso == 'JavaScript'            // o curso é JavaScript?
n1 != n2                         // o primeiro número é diferente do segundo?

** Obs.: quando tem operadores aritméticos e relacionais na mesma linha, a prioridade é dos aritméticos.

## IDENTIDADE ## 
5 == 5      -> true
5 == '5'    -> true  (pq o JS não testa o tipo, ele analisa a grandeza do número. Mesmo valor, tipos diferentes)
5 === '5'    -> false  (testa se são IDÊNTICOS, ou seja, mesmo valor e mesmo tipo)
5 === 5    -> true


## LÓGICOS (execução nesta ordem mesmo) ## 
!     negação (NÃO)
&&    conjunção (E)
||    disjunção (OU)

## NEGAÇÃO (operador binário) ## 
!true -> false
!false -> true

## CONJUNÇÃO (operador binário) ## 
true && true  -> true
true && false  -> false
false && true  -> false
false && false  -> false

## DISJUNÇÃO (operador binário) ## 
true || true  -> true
true || false  -> true
false || true  -> true
false || false  -> false

Obs.: Quando tem operadores aritméticos, relacionais e lógicos na mesma expressão, primeiro ele faz todos
os operadores aritméticos, depois os relacionais e depois os operadores lógicos.

idade >= 15 && idade <= 17          // a idade está entre 15 e 17?
estado == 'RJ'|| estado == 'SP'     // o estado é RJ ou SP?
salario > 1500 && sexo != 'M'       // o salário é acima de 1500 e não é homem?

## ORDEM DE PRECEDÊNCIA: ## 
() ** / ... (aritméticos)
> < >= ... (relacionais, da esquerda para a direita, quem vier primeiro)
Lógicos (tem uma precedência a ser seguida, conforme abaixo:)
!
&&
||


## TERNÁRIO ## (interrogação e dois pontos em uma mesma expressão)
                     ? :
Exemplo:
teste ? true : false
media >= 7.0 ? "Aprovado" : "Reprovado" (executou um teste lógico e como deu falso, apareceu reprovado. var media=5.5)
media >= 7.0 ? "Aprovado" : "Reprovado" (executou um teste lógico e como deu verdadeiro, apareceu aprovado. var media+=3, ficando 8.5)

var x = 8
var res = x % 2 == 0 ? 5:9
valor de res é 5

var idade = 19
var r =  idade >= 18 ? 'MAIOR' : 'MENOR'
valor de r é 'MAIOR'


DOM - Document Object Model

## ÁRVORE DOM ##
window (navegador... é um objeto DOM)
   location (qual é a localização do site... qual url, qual a página anterior)
   document (documento atual)
      html (pai ou parent do head e body)
         head (filho do html ou child)
            meta
            title
         body (filho do html ou child)
            h1
            p
            p
               strong
            div
   history (guarda de onde veio e para onde vc vai)


## FORMAR DE SELECIONAR ##
por Marca         getElementsByTagName()
por ID            getElementsById()
por Nome          getElementsByName()
por Classe        getElementsByClassName()
por Seletor       querySelector()
                  querySelectorAll()


Quando é Id é representado por #
Quando é Class é representado por .

## EVENTOS DOM ##
São coisas que posso fazer com o elemento. Por exemplo: se for uma div e quando o mouse fica "entra" nela,
é possível determinar o mouseenter, mousemove, mousedown, mouseup, click, mouseout, entre diversos outros.
Para maiores informações sobre os eventos, entrar em:
https://developer.mozilla.org/pt-BR/docs/Web/Events


## FUNÇÕES ##
function ação() {
   bloco de ações
}

ou

function ação(parâmetro) {
   bloco de ações
}

## SEQUÊNCIAS ##
var n = 3
n += 2    // aqui o n passa a valer 5
window.alert(n)

## CONDIÇÕES ##
TIPOS DE CONDIÇÃO

   - SIMPLES -
if (condição) {
   true
} 

   - COMPOSTA -
if (condição) {
   true
} else {
   false
}

   - CONDIÇÕES ANINHADAS - // é quando se pega uma cond. composta e coloca outras condições dentro dela.
   if (cond1) {
      bloco1
   } else {
      if (cond2) {
         bloco2
      } else {
         bloco3
      }
   }

   - CONDIÇÃO MÚLTIPLA -
   switch (expressão) {
      case valor1:
         bloco de instruções1
         break                 // sempre precisa ter o BREAK, é obrigatório, se não continuará executando os comandos até achar um break.
      case valor2:
         bloco de instruções2
         break
      case valor3:
         bloco de instruções3
         break
      default:
         bloco de instruções4
         break
   }

DIAS DA SEMANA JAVASCRIPT - new Date()
0- Domingo
1- Segunda
2- Terça
3- Quarta
4- Quinta
5- Sexta
6- Sábado


## REPETIÇÕES ##   AULA 13
- TESTE NO INÍCIO -
while (condição) {
   Bloco1 - Enquanto a condição for verdadeira, este bloco será executado.
}


exemplo:
 function comerPizza() {
    while(temFatia()){
       comerFatia()
    }
 }


 - TESTE NO FIM -
 do {
    Bloco1 - Faça este bloco enquanto a condição abaixo for verdadeira.
 } while (condição)


 - ESTRUTURA DE REPETIÇÃO COM VARIÁVEL DE CONTROLE -
 for (inicio;teste;incr) {
    bloco1
 }



for (var c =1 ;c <= 10 ;c++) {
   bloco1
}

// aqui é o mesmo que o acima, usando o while
 var c = 1
 while (c <= 10) {
    bloco1
    c++
 }

 